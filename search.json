[{"path":"https://bartonicek.github.io/plotscaper/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 plotscaper authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"The algebra of interaction","text":"really like data visualization. fact, making plots one first things drew R. Prior becoming statistics student, done work applied research, can still deeply feel pain trying reason data collected crude tables summary statistics. Learning R packages like ggplot2 (Wickham 2016) liberated way bordered spiritual. finally able see data, intricacies imperfections, eliminate much guesswork struggled . , naturally, data visualization became big part day--day data science workflow. experiment write scripts render pages upon pages static plots trawl , trying see glean parts overall picture. Several times, thought using interactive data visualization. knew packages making interactive figures . However, time tried using one , ended going away somewhat disappointed. usually boiled kind Goldilocks problem. packages either simple, easy pick offering fairly shallow interactive features, complex, highly expressive requiring learn essentially whole new programming language, spend hours writing dense code just make one fairly simple interactive figure. simple packages just provide features wanted, complex ones seemed designed data presentation really worth time investment - things different making dashboards large company organization, time, audience figures , plus minus colleagues. end, always ended going back good old static plots. , moved statistics supervisor offered project goal create interactive data visualization package geared towards data exploration, immediately jumped opportunity. wanted make tool data exploration simple enough pick offer decent number useful interactive features default still fairly customizable. , wanted make tool lacking time applied research work.","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"linked-selection","dir":"Articles","previous_headings":"","what":"Linked selection","title":"The algebra of interaction","text":"One feature wanted support default package linked selection. Linked selection (aka “linked brushing” “highlighting”) ability click objects one plot corresponding cases highlighted across plots. Many data visualization researchers highlight one useful interactive features (see e.g. Buja, Cook, Swayne 1996; Heer Shneiderman 2012; Ward, Grinstein, Keim 2015; Ware 2019). see linked selection works, click/click drag select objects (points bars) figure : However, despite fact many data visualization authors praise virtues linked selection, interactive data visualization packages actually support feature box. example, see following quote Crosstalk website: “Crosstalk currently works linked brushing filtering views show individual data points, aggregate summary views (“observations” defined single row data frame). example, histograms supported since bar represents multiple data points; scatter plot points represent single data point, supported.” (RStudio Inc. 2023) similar holds many current interactive data visualization libraries - support linked selection usually quite limited, feature present . However, didn’t always used like . Linked selection actually used standard many earlier interactive data visualization packages available R, GGobi (Swayne et al. 2003), Mondrian (Theus 2002), iplots (Urbanek Theus 2003; Urbanek 2011). happened? following hypothesis offer. Despite seeming fairly straightforward, linked selection can actually surprisingly tricky implement generically (reasons spend rest article explaining). wasn’t much problem older generation interactive data visualization packages, since tended implement interactive plots one offs - called one function create interactive plot type another function create interactive plot type B. However, happened past 20 years declarative, grammar-based style data visualization became popular. style, popularized packages like ggplot2, made possible build plots combining independent, modular components (e.g. stats geoms). power approach allows swap different components rapidly prototype many different ways representing data, likely grew popularity quickly. became standard static visualization, authors interactive data visualization libraries wanted support style well. However, herein lies problem think. claim certain types interaction linked selection actually hard implement grammar-based style, components (stats, geoms, interaction) aren’t independent. explore claim detail rest article.","code":"library(plotscaper)  names(airquality) <- c(\"ozone\", \"solar radiation\", \"wind\",                         \"temperature\", \"month\", \"day\")  create_schema(airquality) |>   add_scatterplot(c(\"solar radiation\", \"ozone\")) |>   add_barplot(c(\"month\")) |>   render() #> Warning in create_schema(airquality): Removed 42 rows with missing values from #> the data"},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"the-problem","dir":"Articles","previous_headings":"","what":"The problem","title":"The algebra of interaction","text":"started work interactive data visualization package, wanted support certain interactive features like linked selection box, however, wanted also retain flexibility grammar-based visualization systems. Specifically, wanted able use plots show different kinds summary statistics, example counts, sums, means maximums. However, kept running one problem, . Initially, found hard even describe problem , however, eventually stumble upon right kind language . Anyway, think best begin describing problem via example. Try see can spot ’s wrong following plot:  don’t look closely, plot looks like perfectly fine ggplot2 figure. looks like something might result linked selection, dark blue bars representing selected cases. However, take closer look following line: ’re telling ggplot2 want draw bars summarizing y-axis variable average, within levels defined Cartesian product x fill variables (.e. table x rows fill columns). ’s fine. However, ’s one important default argument geom_bar don’t see unless specify explicitly: use fill aesthetic geom_bar (well geoms), ggplot2 applies stack transformation default. case bars, means bars get stacked vertically, one top another. However, height stacked bars represent? Visually, stacking bars effectively summing underlying statistic. Now, since single-colored bar represents group mean, whole bar consisting light-blue dark-blue bar represents sum group averages. problem sum averages meaningful summary statistic. ’s quantity many people ask know interpret. kind problem can easily trip data visualization rookie, good number data visualization researchers actually warned : “Stacking useful sum amounts represented individual stacked bars meaningful amount” (Wilke 2019, 52). “[…] important element’s size used display statistic, statistic must summable. Stacking bars represent counts, sums, percentages fine, stacked bar chart bars show average values generally meaningless.” (Wills 2011, 112). Now know can’t stack averages, however, apply transformation within groups across groups, taking average averages? Unfortunately, correct either. mean group means guaranteed grand mean: researchers warned : “[…] ensure aggregate statistics always computed input data, users inadvertantly compute e.g., averages averages, can easily lead misinterpretation.” (Wu 2022)","code":"theme_set(theme_bw() +              theme(panel.grid = element_blank(),                   panel.border = element_blank(),                   panel.background = element_rect(fill = \"whitesmoke\")))  ggplot(mtcars, aes(x = cyl, y = mpg, fill = am)) +   geom_bar(stat = \"summary\", fun = mean) +   scale_fill_manual(values = c(\"#92c9f6\", \"#377eb8\")) +   guides(fill = \"none\") geom_bar(stat = \"summary\", fun = mean) geom_bar(stat = \"summary\", fun = mean, position = \"stack\") mean(1:3) #> [1] 2 mean(mean(1:2), 3) #> [1] 1.5"},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"stacking-vs--dodging","dir":"Articles","previous_headings":"","what":"Stacking vs. dodging","title":"The algebra of interaction","text":"want display barplot means linked selection? ’re familiar ggplot2, may thinking one solution right now: instead stacking, let’s use dodging plot bars side side:  indeed, technique works rather well static graphics. However, interactive graphics, dodging several issues. Take look following figure:  top row plots, use stacking, bottom row use dodging (data used across plots, except fill variable). can imagine barplots produced linked selection, dark-blue bars representing selected cases. Looking plots, can imagine cases selected move left right. Notice top row, overall contour plots remains constant even numbers selected cases change: always tall left bar, short middle bar, tall right bar. heights dark-blue sections change. true dodging. dodging, since plot selected non-selected cases side--side, selection can affect overall shape plot. Bars may shrink grow, even pop existence (see left-plot bottom row - selected cases category 6 dark-blue bar light-blue bar expanded fill available space). lack visual consistency propagates parts plot. Notice bottom row, top y-axis limits change across plots. context interactive graphics, means either might make axes reactive (means user loses context height bar represents time selection happens) risk bars growing past edge plotting region. Finally, may bit subjective, find interactive figures change gradually visually pleasing easier read figures fluctuate rapidly. dodged barplot definition twice many moving parts stacked barplot, lot motion opposite directions - selected bars grow, non-selected bars shrink, vice versa. don’t know specific visual perception research support claim, seems make animation induced dodged barplot harder follow.","code":"ggplot(mtcars, aes(x = cyl, y = mpg, fill = am)) +   geom_bar(stat = \"summary\", fun = mean, position = \"dodge\") +   scale_fill_manual(values = c(\"#92c9f6\", \"#377eb8\")) +   guides(fill = \"none\")"},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"sums-preserve-set-union","dir":"Articles","previous_headings":"","what":"Sums preserve set union","title":"The algebra of interaction","text":"mean can every linked selection sums counts? seems quite limiting. perhaps ’s another way think . quotes , Wilke (2019) Wills (2011) said quantity represented stacked bar “meaningful”. makes quantity meaningful? tried thinking ways rephrase Wilke Wills getting . eventually arrived following. Sums particularly nice kind summary statistic following property: Sum grouped sums equal sum everything. words, can take subsets data, sum subset individually, sum sums, ’ll get result gone whole data set summed everything one go. words, sums preserve set union. makes possible draw highlighted parts bars objects - know combine two sums, ’ll get valid summary union underlying data sets. statistics behave way ? replace word “sum” placeholder, example “foo”: Foo grouped foos equal foo everything. actually turns statistics behave way. example, product products also valid product values: Likewise, maximum maximum also valid maximum values: even exotic operators behave way, like Euclidean norm vector append value : operators just don’t behave way. one example already discussed mean average. Another exponentiation:","code":"prod(2:4) #> [1] 24 prod(prod(2:3), 4) #> [1] 24 max(c(1, 2, 999)) #> [1] 999 max(max(1, 2), 999) #> [1] 999 euclid_norm_append <- function(x, y = 0) sqrt(sum(x^2) + sum(y^2))  euclid_norm_append(c(1, 2), 3) #> [1] 3.741657 euclid_norm_append(c(1, 2, 3)) #> [1] 3.741657 (2^3)^4 #> [1] 4096 2^(3^4) #> [1] 2.417852e+24"},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"monoids","dir":"Articles","previous_headings":"","what":"Monoids","title":"The algebra of interaction","text":", “nice” statistics property preserving set unions, others don’t. Can make idea “niceness” precise? turns mathematical concept describes exactly . word Monoid sounds scary ’s really nothing complicated. monoid really just three things: set values MM binary operation ⊗:M×M→M\\otimes: M \\times M \\M neutral element e∈\\M Subject two rules: Unitality: x⊗e=e⊗x=xx \\otimes e = e \\otimes x = x Associativity: x⊗(y⊗z)=(x⊗y)⊗zx \\otimes (y \\otimes z) = (x \\otimes y) \\otimes z plain words, monoid, “bunch” things called MM way combining things ⊗\\otimes, , combine, order doesn’t matter. also neutral element ee, , combined anything else, just yields thing back. Typical examples monoids mentioned sums, products, maximums (, set MM real numbers neutral units 0, 1, −∞-\\infty respectively). Counterexamples include also -mentioned means exponentiation. Neither associative include convenient default neutral element value combined without modified. idea monoids comes abstract algebra category theory (see e.g. Fong Spivak 2019; Lawvere Schanuel 2009), also used functional programming (see e.g. Milewski 2018). purposes, however, monoids important exact property looking - preserve set union. Suppose data DD two disjoint subsets data ,B⊆DA, B \\subseteq D. Suppose also monoidal summary statistic FF can apply either subset. example, applying FF AA means just “folding” AA’s elements one one single value, using FF: F()=a1⊗a2⊗…⊗anF() = a_1 \\otimes a_2 \\otimes \\ldots \\otimes a_n (.e. like taking “sum” elements AA, “sum” actually operator). Now, summarize AA BB combine summaries, get result summarizing union: F()⊗F(B)=(a1⊗a2⊗…)⊗(b1⊗b2⊗…bn)=a1⊗a2⊗…⊗b1⊗b2⊗…bn(associativity: brackets don’t matter)=F(∪B)\\begin{aligned}  F() \\otimes F(B) &= (a_1 \\otimes a_2 \\otimes \\ldots a_n) \\otimes (b_1 \\otimes b_2 \\otimes \\ldots b_n) \\\\ &= a_1 \\otimes a_2 \\otimes \\ldots a_n \\otimes b_1 \\otimes b_2 \\otimes \\ldots b_n \\qquad \\text{(associativity: brackets matter)} \\\\ &= F(\\cup B) \\end{aligned} means , monoids, can compare nested subsets data. precisely want highlighting cases data interactive plots: want compare summary selected cases F(Selected)F(\\text{Selected}) vs. everything F(Selected∪selected)F(\\text{Selected} \\cup \\text{selected}). caveats regarding comparison multiple selected groups monotonicity. TODO","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/algebra.html","id":"barplot-of-maximums","dir":"Articles","previous_headings":"","what":"Barplot of maximums","title":"The algebra of interaction","text":"plotscaper, can actually take advantage . know little bit JavaScript, can use available plots display new monoidal summary statistic, using something called reducer. create reducer, need two things: initial function: function produces neutral element ee reduce function: function takes two values combines together, operation associative unital currently need JavaScript functions. example, suppose want display barplot maximums positive numeric variable. can use following JavaScript arrow function initial function: function takes arguments just produces value zero. computer science lingo, kind “dumb” function called thunk (case, function technically just value, way pointers work JavaScript, thunks general). thing need reduce function: just simple binary function takes two numbers returns bigger one (using JavaScript built-Math.max function). ’s . might asking plotscaper know whether operation associative unital. doesn’t - figure : try couple candidate values & see properties hold. give plotscaper function doesn’t properties still try make interactive plot. reason can’t prevent way know values try - example, operation associative unital handful numbers others (sidenote: functions behind can actually support values numbers, haven’t tried implement plot non-numeric summaries yet ’ll see future). Anyway, ’s can create barplot maximums plotscaper: Since maximum monoid, highlighting work expected! However, one selected group (transient selection). multiple groups selected, may able see bars; reason bit math. TODO","code":"() => 0 (x, y) => Math.max(x, y) # Make the reducer - really just an R list() with some serialization metadata max_reducer <- reducer(   name = \"max\",   initialfn = \"() => 0\",   reducefn = \"(x, y) => Math.max(x, y)\" )  create_schema(airquality) |>   add_scatterplot(c(\"solar radiation\", \"ozone\")) |>   add_barplot(c(\"day\", \"ozone\"), options = list(reducer = max_reducer)) |>   render() #> Warning in create_schema(airquality): Removed 42 rows with missing values from #> the data"},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"linked-selection-bread-and-butter","dir":"Articles","previous_headings":"","what":"Linked selection: Bread and butter","title":"Available interactions","text":"one main features plotscaper (indeed, systems interactive data visualization). plots plotscaper figure linked, clicking clicking--dragging can used select objects one plot, corresponding cases highlighted across plots. default, selection transient, meaning make selection click anywhere else figure, selection disappears. can make selection permanent assign cases permanent groups holding key 1, 2, 3 selection. Permanent selection removed double-clicking. client-side interactions (clicking buttons pressing keys). can achieve effect R using select_cases assign_cases functions: Additionally, ’re inside running R session, can also use selected_cases assigned_cases query current selection status. document ’re reading static HTML, therefore functions work . Transient permanent selection combine Cartesian product (just fancy way saying “possible combinations”), can 8 distinct selection groups present figure time: base, base + transient, group 1, group 1 + transient, etc… Now, might best idea 8 different selection groups present plot single time - static data visualization, know number distinct groups can efficiently perceive based color limited, go past, say, three really start strain visual system. However, combining transient selection permanent selection can useful quickly answering queries nested subsets data. example, ’s can figure many 8-cylinder cars also automatic: additional considerations linked selection, see algebra vignette.","code":"library(plotscaper)  schema <- create_schema(mtcars) |>    add_scatterplot(c(\"wt\", \"mpg\")) |>    add_barplot(c(\"cyl\"))  schema |> select_cases(1:10) |> render() schema |>    assign_cases(1:10) |> # Use e.g. 'group = 2' to assign to a different group   render() schema |>    assign_cases(which(mtcars$cyl == 8)) |>   select_cases(which(mtcars$am == 1)) |>   render()"},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"zooming","dir":"Articles","previous_headings":"Zooming, panning, and scales","what":"Zooming","title":"Available interactions","text":"’ve made selection, can zoom selected region pressing zoom key (Z default). can zoom plot multiple times. revert zoom, can either full reset figure (R key; get rid temporary state well, including histogram binwidth/anchor changes, barplot reordering, etc…), “pop” one level zoom (X key). Server-side, can use zoom function zoom specific region plot. example, ’s can zoom middle 1/4 scatterplot: can think coordinates rectangle starting 25th percentiles ending 75th percentiles, x- y-axis. axis, covers exactly 50% plot area, since along axes, resulting size region 0.52=0.250.5 ^2 = 0.25 25% (1/4). default, zoom function uses pct units, meaning coordinates provide (vector rectangle corners: x0, y0, x1, y1) interpreted percentages. can change units argument abs (absolute pixels) data (data coordinates; continuous scales ): Notice also need provide functions plot identifier second argument (first using pipe |>). plot identifier always form \"[prefix][numeric suffix]\", prefix can either generic \"plot\" can refer specific plot type, \"scatter\", \"bar\", \"histo\". suffix identifies plot position figure, left--right, top--bottom order. example, \"plot1\" identifier identifies left-top-plot figure, \"scatter1\" identifies left-top-scatterplot, etc… can always retrieve list available plot identifiers scene schema using get_plot_ids function: (function returns list identifiers indexed plot type) Identifiers can also shortened. can read identifiers ?id.","code":"schema |> zoom(\"plot1\", c(0.25, 0.25, 0.75, 0.75)) |> render() schema |> zoom(\"plot1\", c(0, 0, 10, 50), units = \"data\") |> render() schema |> get_plot_ids() #> [1] \"scatter1\" \"bar1\""},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"panning","dir":"Articles","previous_headings":"Zooming, panning, and scales","what":"Panning","title":"Available interactions","text":"Panning also supported box. pan plot, simply click hold right mouse button move mouse. Server-side, haven’t provided direct utility panning. However, show next section, can achieve behavior either using zoom manipulating scales.","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"scales","dir":"Articles","previous_headings":"Zooming, panning, and scales","what":"Scales","title":"Available interactions","text":"achieve result panning panning manually, can set zero one properties x- y-scales. simple terms, zero one determine minimum maximum data get mapped codomain (screen position, case). example, zero = 0 one = 1 ’re mapping plotting region 800 pixels wide, minimum data value get mapped 0px maximum get mapped 800px. zero = 0.1 one = 0.9 (default), minimum data values gets mapped 0.1 * 800 = 80 pixels maximum get mapped (800 * 0.9) = 720 pixels. Simple enough, right? can emulate panning incrementing zero one amount given scale. example, ’s can “pan” plots 50% viewport’s width right: reason zero one value 0.1 0.9 default prevent objects overlapping plotting region borders expanding scale. ’s looks like ’re actually set values 0 1: aren’t best looking plots, ’m sure ’d agree. Sensible default margins useful, time. changes scale parameters temporary default - press reset key (R), revert back defaults. want changes persist, add default = TRUE argument set_scale call. Finally, want inspect values scale uses translate data JavaScript side, can use get_scale function: output somewhat complicated list(). want learn works look documentation ?get_scale. also implement panning specifying minimum maximum data scale explicitly. generally don’t recommend , since works continuous scales also goes zooming panning implemented plotscaper: user interactions manipulate zero one touch data values scales (even zoom(..., units = \"data\") ). set data limits explicitly, may encounter weird behavior (maybe , consider fair warning). Anyway, ’d recommend using zoom(..., units = \"data\") really want mess data limits, can : (notice also points stay constant size, whereas zoom shrinks/grows objects response zooming/unzooming) Finally, can also flip direction scale like :","code":"schema |>    set_scale(\"plot1\", \"x\", zero = 0.6, one = 1.4) |> # zero/one = default value + 0.5   set_scale(\"plot2\", \"x\", zero = 0.6, one = 1.4) |> # ditto   render() schema |>    set_scale(\"plot1\", \"x\", zero = 0, one = 1) |>    set_scale(\"plot1\", \"y\", zero = 0, one = 1) |>   # Barplot scales are a bit more complicated:   # - for 'y' scale, zero is frozen (i.e. panning stretches bars up and down)    #   so we need to unfreeze this parameter to modify it   # - for 'width', there is one more parameter that determines the width of the bar   set_scale(\"plot2\", \"x\", zero = 0, one = 1) |>    set_scale(\"plot2\", \"y\", zero = 0, one = 1, unfreeze = TRUE) |>   set_scale(\"plot2\", \"width\", zero = 0, one = 1, mult = 1) |>    render() # NOT RUN - this only works in an active R session scene |> get_scale(\"plot1\", \"x\") schema |>    set_scale(\"plot1\", \"x\", zero = 0, one = 1, min = 0, max = 10) |>    set_scale(\"plot1\", \"y\", zero = 0, one = 1, min = 0, max = 50) |>   render() schema |> set_scale(\"plot1\", \"y\", direction = -1) |> render()"},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"discrete-scales","dir":"Articles","previous_headings":"Zooming, panning, and scales","what":"Discrete scales","title":"Available interactions","text":"can also interactively reorder discrete scales. barplot, can automatically sort bars value (O key). Server-side, can setting breaks argument (fine-grained control - can order bars way want): Note: make sure breaks match factor levels exactly - failing result client-side error, see unless open developer console (right click viewer panel + “inspect element”).","code":"schema |>   set_scale(\"plot2\", \"x\", breaks = c(\"6\", \"4\", \"8\")) |>   render()"},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"size-and-opacity","dir":"Articles","previous_headings":"","what":"Size and opacity","title":"Available interactions","text":"can manipulate size opacity objects figure using grow/shrink keys (+/-) fade/unfade keys ([/]), respectively. Manipulating size objects actually works bit differently depending type object plot: scatterplots, modifies point area, barplots, modifies bar widths, histograms, changes binwidth (see ). interactions make sense client-side, may add utilities server-side future.","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"querying","dir":"Articles","previous_headings":"","what":"Querying","title":"Available interactions","text":"can query geometric object plotscaper pressing holding query key (Q) hovering . Like manipulating size opacity, querying server-side analog. data summaries exist client-side . also makes plotscaper relatively fast - everything computed client-side, communication R session happens necessary. theoretically implement way query objects server-side, coming sensible API seems like fairly complicated (pointless) exercise - hovering rectangle simple unambiguous way specify want query specific rectangle specific coordinates, code? Maybe ’ll change mind future. now, want object summaries R, can always just subset relevant rows (using selected_cases assigned_cases get cases corresponding specific object) compute summaries .","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"parametric-interaction-normalization-histograms","dir":"Articles","previous_headings":"","what":"Parametric interaction: normalization, histograms","title":"Available interactions","text":"plotscaper also supports certain custom parametric interactions. example, many aggregation plots barplot, histogram (1d 2d), fluctuation can “normalized”, meaning , example, can turn barplot spineplot, sets total height bar one maps count/statistic bars’ width. useful accurately comparing proportions across bars different heights. Client-side, can pressing N key. Server-side, can call normalize function. Compare following two figures: second figure, ’s much easier see proportion selected cases 6 8 cylinders .","code":"schema |> select_cases(5:15) |> render() schema |> select_cases(5:15) |> normalize(\"plot2\") |> render()"},{"path":"https://bartonicek.github.io/plotscaper/articles/available-interactions.html","id":"histogram-binwidths-and-anchors","dir":"Articles","previous_headings":"Parametric interaction: normalization, histograms","what":"Histogram binwidths and anchors","title":"Available interactions","text":"Currently, parameters can interactively manipulated histogram binwidth anchors. applies 1D 2D histograms. client-side can use grow/shrink keys (+/-) change size bins, increment/decrement anchor keys ('/;) change anchor. 2D histograms, can change binwidth, happens axes simultaneously; didn’t seem make sense change anchor axes simultaneously, didn’t want complicate default interface adding keys. want fine-grained control 2D histogram, use server-side functions. note, server-side, can use set-parameters function: (notice boundaries bins aligned midpoints axis labels) 2D histograms, need specify axis want set parameters :","code":"create_schema(mtcars) |>    add_scatterplot(c(\"wt\", \"mpg\")) |>   add_histogram(c(\"wt\")) |>    set_parameters(\"plot1\", width = 1, anchor = 0.5) |>   render() names(airquality) <- c(\"ozone\", \"solar radiation\", \"wind\",                         \"temperature\", \"month\", \"day\")  create_schema(airquality) |>   add_histogram2d(c(\"solar radiation\", \"ozone\")) |>   add_pcoords(names(airquality)) |>   set_parameters(\"plot1\", width_x = 30, width_y = 15,                    anchor_x = 0, anchor_y = 0) |>   render() #> Warning in create_schema(airquality): Removed 42 rows with missing values from #> the data"},{"path":"https://bartonicek.github.io/plotscaper/articles/layout.html","id":"adding-and-removing-plots","dir":"Articles","previous_headings":"","what":"Adding and removing plots","title":"Layout","text":"probably seen vignettes, can add plots using various add_plot functions: can also remove plots: make much sense server-side, since, don’t want specific plot figure, can just add figure first place. However, client-side, can useful, since can modify figure fly: already discussed Get started section.","code":"library(plotscaper)  names(airquality) <- c(\"ozone\", \"solar radiation\", \"wind\",                         \"temperature\", \"month\", \"day\")  schema <- create_schema(airquality) |>   add_scatterplot(c(\"solar radiation\", \"ozone\")) |>   add_barplot(c(\"day\")) |>   add_histogram(c(\"wind\")) |>   add_pcoords(names(airquality)) #> Warning in create_schema(airquality): Removed 42 rows with missing values from #> the data  schema |> render() schema |>    remove_plot(\"bar1\") |> # Remove the first barplot added to the figure   pop_plot() |> # Remove the last plot added to the figure - typically, the bottom-right one   render() # NOT RUN - this only makes sense inside a running R session scene <- create_schema(airquality) |> render()  scene |> add_scatterplot(c(\"solar radiation\", \"ozone\")) scene |> add_barplot(c(\"day\")) # Oops, maybe I want a histogram instead scene |> pop_plot() scene |> add_histogram(c(\"wind\"))"},{"path":"https://bartonicek.github.io/plotscaper/articles/layout.html","id":"layout","dir":"Articles","previous_headings":"","what":"Layout","title":"Layout","text":"can also modify layout plotscaper figure, using interface ’s similar graphics::layout. ’re familiar function, can provide numeric matrix, values identifying plotting regions contiguous rectangles, plots appropriately resized: matrix can size, requirement plot areas must contiguous, meaning e.g. valid layout: Also, plots included layout. , pop-warning show . can decide whether want proceed figure, however, warned layout may work well. Finally, can call set_layout function inside running R session scene |> set_layout(...) (get client-side update current figure).","code":"# 1. Big scatterplot on the top left # 2. Small barplot on the top right # 3. Small histogram on the right # 4. Wide parallel coordinates plot on the bottom # 0. (empty space on the bottom right)  layout <- matrix(c(   1, 1, 2,   1, 1, 3,   4, 4, 0 ), ncol = 3, byrow = TRUE)  schema |> set_layout(layout) |> render() layout <- matrix(c(   2, 1, # Cannot split plotting regions like this   1, 2 ), ncol = 2)"},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"the-scene-and-the-schema","dir":"Articles","previous_headings":"","what":"The scene and the schema","title":"Introduction to plotscaper","text":"take full advantage plotscaper, need understand two core functions: create_schema render. ’ll explore example penguins data set (Horst, Hill, Gorman 2020).","code":""},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"creating-a-schema","dir":"Articles","previous_headings":"The scene and the schema","what":"Creating a schema","title":"Introduction to plotscaper","text":"create_schema function initializes schema - sort recipe can use define figure. Like data visualization packages, build schema step--step, calling functions append additional information : schema really just list messages: Typically, ’ll use schema add plots. However, can also things select cases set axis limits: fact, things can schema can also interactively, vice versa. see next section.","code":"library(palmerpenguins)  penguins <- na.omit(penguins) # missing data is not supported yet, unfortunately names(penguins) <- names(penguins) |> gsub(\"(_mm|_g)\", \"\", x = _)  schema <- create_schema(penguins) |>    add_scatterplot(c(\"body_mass\", \"flipper_length\")) |>    add_barplot(c(\"species\")) |>   add_fluctplot(c(\"species\", \"sex\")) |>   add_histogram(c(\"bill_length\")) schema #> plotscaper schema: #> add-plot { type: scatter, variables: c(\"body_mass\", \"flipper_length\") } #> add-plot { type: bar, variables: species } #> add-plot { type: fluct, variables: c(\"species\", \"sex\") } #> add-plot { type: histo, variables: bill_length } schema <- schema |>   assign_cases(which(penguins$species == \"Adelie\")) |>   set_scale(\"plot1\", \"x\", min = 0) |>   set_scale(\"plot1\", \"size\", max = 5)  schema #> plotscaper schema: #> add-plot { type: scatter, variables: c(\"body_mass\", \"flipper_length\") } #> add-plot { type: bar, variables: species } #> add-plot { type: fluct, variables: c(\"species\", \"sex\") } #> add-plot { type: histo, variables: bill_length } #> set-assigned { cases: c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,  #> 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145), group: 1 } #> set-scale { scale: x, min: 0 } #> set-scale { scale: size, max: 5 }"},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"rendering-a-scene","dir":"Articles","previous_headings":"The scene and the schema","what":"Rendering a scene","title":"Introduction to plotscaper","text":"finally comes time turn recipe actual interactive figure scene, can calling render function: render function takes schema turns htmlwidgets widget can interact RStudio viewer embed RMarkdown documents. However, can also little bit . ’re following along RStudio, try : see cases data get highlighted. Importantly, notice figure get re-rendered!","code":"scene <- schema |> render() scene scene |> select_cases(1:10)"},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"the-difference-between-scene-and-schema","dir":"Articles","previous_headings":"","what":"The difference between scene and schema","title":"Introduction to plotscaper","text":"Whereas create_schema merely initializes recipe just regular R object (list), render function renders recipe htmlwidgets widget, , inside running R session, also launches httpuv server direct communication R session figure. can use (mostly) functions modify schema (created call create_schema) scene (created call render). difference calling functions schema first argument merely appends corresponding message recipe, calling functions scene immediately sends message figure via server. , following code: causes two full re-renders, following code: causes one render (inside running R session). words, plotscaper functions add_*, set_selected, set_scale behave differently based whether call scene schema: Schema: calling function lazily appends list messages get executed future, schema rendered Scene: calling function immediately sends message scene mutates state second method works interactive R session need server communicate figure. running following code (document ’re reading knitted) throws error: knit RMarkdown document, generate static HTML file. default, communicate file since ’s just big blob HTML, CSS, JavaScript. way change file rewrite . Thus, RMarkdown, can really really write schema render - can’t anything figure ’s rendered. contrast, inside interactive R session, can launch server listen respond messages R session send figure (also send messages figure back R session - done via WebSockets). also means functions make sense use inside running R session. example, following functions query selection status figure: means can, example, render figure, select cases data using mouse, call scene |> selected_cases() get row indices cases. doesn’t really make sense writing schema - way select cases via explicit call select_cases, querying cases already specified . Likewise, functions pop_plot remove_plot can used remove plots scene. don’t really make sense use writing schema - know don’t want specific plot, can just delete line adds recipe. However, make sense interacting scene inside running R session. Perhaps found interesting trend data want see holds plots, ’re running space viewer - can pop_plot remove last plot add_* add new plot, keeping rest state figure intact!","code":"# NOT RUN scene <- schema |> select_cases(20:30) |> render() scene scene # NOT RUN scene <- schema |> render() scene |> select_cases(20:30) scene |> select_cases(20:30) interactive() #> [1] FALSE scene |> select_cases(1:10) #> Error: You can only send messages to scene from within an interactive R session scene |> selected_cases() scene |> assigned_cases()"},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"troubleshooting-the-scene","dir":"Articles","previous_headings":"","what":"Troubleshooting the scene","title":"Introduction to plotscaper","text":"Sometimes, rendering multiple figures quickly, figure may fail connect server server may failed launched altogether. Often, cause default port number already taken. try fix bug future, however, time , can always fix running either following functions: :","code":"start_server(random_port = TRUE) # Starts a server on a new random port httpuv::stopAllServers() # Stops all servers, now you should be able to relaunch the server"},{"path":"https://bartonicek.github.io/plotscaper/articles/plotscaper.html","id":"bonus-scatterplot-matrix","dir":"Articles","previous_headings":"","what":"Bonus: Scatterplot matrix","title":"Introduction to plotscaper","text":"Since schema lazy, can use generate figures programmatically. example, ’s create interactive scatterplot matrix (SPLOM) penguins data set: Just re-iterate point previous section, also interactively, writing calls add plots : However, nine plots might quickly get tedious. , different reasons might want something using scene, schema, combination . ’re writing RMarkdown document, don’t really choice - can’t anything scene ’s rendered. Inside interactive R session, options. can decide first want create highly customized schema start interacting figure live. can just immediately fire scene <- create_schema(data) |> render() everything interactively. approach advantages disadvantages. schema way, can always re-create state, mess need go back, can just print scene ’re good go. interactive scene way, ’re flexible immediate feedback seeing figure changes front , however, may difficult recover state many intermediate steps.","code":"schema <- create_schema(penguins) keys <- names(penguins)[4:6]  # Loop through combinations of columns for (i in seq_along(keys)) {   for (j in seq_along(keys)) {     # Add a scatterplot if row & column no.'s are different     if (i != j) schema <- schema |> add_scatterplot(c(keys[i], keys[j]))     # Add a histogram if row & column no.'s match     else schema <- schema |> add_histogram(c(keys[i]))    } }  # Options to make the plots fit better within the available space opts <- list(size = 5, axis_title_size = 0.75, axis_label_size = 0.5) schema |> render(options = opts) scene <- create_schema(penguins) |> render(opts)  scene |> add_histogram(c(\"bill_depth\")) scene |> add_scatterplot(c(\"bill_depth\", \"flipper_length\")) scene |> add_scatterplot(c(\"bill_depth\", \"body_mass\")) ..."},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Bartonicek. Author, maintainer, copyright holder.","code":""},{"path":"https://bartonicek.github.io/plotscaper/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bartonicek (2024). plotscaper: Explore Data Interactive Figures. R package version 0.2.3, https://bartonicek.github.io/plotscaper/.","code":"@Manual{,   title = {plotscaper: Explore Your Data with Interactive Figures},   author = {Adam Bartonicek},   year = {2024},   note = {R package version 0.2.3},   url = {https://bartonicek.github.io/plotscaper/}, }"},{"path":"https://bartonicek.github.io/plotscaper/index.html","id":"plotscaper","dir":"","previous_headings":"","what":"Explore Your Data with Interactive Figures","title":"Explore Your Data with Interactive Figures","text":"Plotscaper R package designed making interactive figures data exploration. plots plotscaper support linked selection default, well wide variety interactions, including, zooming, panning, reordering, parameter manipulation. package powering plotscaper figures (plotscape) written (mostly) vanilla TypeScript/JavaScript uses external dependencies/framework reactivity.","code":""},{"path":"https://bartonicek.github.io/plotscaper/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Explore Your Data with Interactive Figures","text":"get started, install plotscaper : Next, open RStudio run following code:  viewer, now see something like (static) image , however, version fully interactive. Try clicking dragging scatterplot select points! Alternatively, see fully interactive version figure online, go one vignettes Get started. (image just static snapshot Github doesn’t allow JavaScript README.md. vignettes full HTML files rendered RMarkdown support JavaScript result)","code":"devtools::install_github(\"bartonicek/plotscaper\") library(plotscaper)  names(airquality) <- c(\"ozone\", \"solar radiation\", \"wind\",                         \"temperature\", \"month\", \"day\")  create_schema(airquality) |>   add_scatterplot(c(\"solar radiation\", \"ozone\")) |>   add_barplot(c(\"day\", \"ozone\"), list(reducer = \"max\")) |>   add_histogram(c(\"wind\")) |>   add_pcoords(names(airquality)[1:4]) |>   render() #> Warning in create_schema(airquality): Removed 42 rows with missing values from #> the data"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a barplot to a scene or schema — add_barplot","title":"Add a barplot to a scene or schema — add_barplot","text":"function adds barplot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a barplot to a scene or schema — add_barplot","text":"","code":"add_barplot(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a barplot to a scene or schema — add_barplot","text":"x plotscaper scene schema object variables vector variable names: one discrete (required), one continuous (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a barplot to a scene or schema — add_barplot","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_bibarplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a mirrored barplot to a scene or schema — add_bibarplot","title":"Add a mirrored barplot to a scene or schema — add_bibarplot","text":"function adds mirrored barplot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_bibarplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a mirrored barplot to a scene or schema — add_bibarplot","text":"","code":"add_bibarplot(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_bibarplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a mirrored barplot to a scene or schema — add_bibarplot","text":"x plotscaper scene schema object variables vector variable names: one discrete (required), one two continuous (required) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_bibarplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a mirrored barplot to a scene or schema — add_bibarplot","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_fluctplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fluctuation diagram to a scene or schema — add_fluctplot","title":"Add a fluctuation diagram to a scene or schema — add_fluctplot","text":"function adds fluctuation diagram plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_fluctplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fluctuation diagram to a scene or schema — add_fluctplot","text":"","code":"add_fluctplot(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_fluctplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a fluctuation diagram to a scene or schema — add_fluctplot","text":"x plotscaper scene schema object variables vector variable names: two discrete (required), one continuous (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_fluctplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a fluctuation diagram to a scene or schema — add_fluctplot","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a histogram to a scene or schema — add_histogram","title":"Add a histogram to a scene or schema — add_histogram","text":"function adds histogram plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a histogram to a scene or schema — add_histogram","text":"","code":"add_histogram(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a histogram to a scene or schema — add_histogram","text":"x plotscaper scene schema object variables vector variable names: one continuous (required), one continuous (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a histogram to a scene or schema — add_histogram","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a 2D histogram to a scene or schema — add_histogram2d","title":"Add a 2D histogram to a scene or schema — add_histogram2d","text":"function adds 2D histogram plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a 2D histogram to a scene or schema — add_histogram2d","text":"","code":"add_histogram2d(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a 2D histogram to a scene or schema — add_histogram2d","text":"x plotscaper scene schema object variables vector variable names: two continuous (required), one continuous (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_histogram2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a 2D histogram to a scene or schema — add_histogram2d","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_pcoords.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a parallel coordinates plot to a scene or schema — add_pcoords","title":"Add a parallel coordinates plot to a scene or schema — add_pcoords","text":"function adds parallel coordinates plot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_pcoords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a parallel coordinates plot to a scene or schema — add_pcoords","text":"","code":"add_pcoords(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_pcoords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a parallel coordinates plot to a scene or schema — add_pcoords","text":"x plotscaper scene schema object variables vector variable names: least two continuous discrete variables options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_pcoords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a parallel coordinates plot to a scene or schema — add_pcoords","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/add_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a plot to a scene or schema — add_plot","title":"Add a plot to a scene or schema — add_plot","text":"function adds plot existing plotscaper scene schema. meant called directly instead wrapper function add_scatterplot().","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a plot to a scene or schema — add_plot","text":"","code":"add_plot(x, spec)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a plot to a scene or schema — add_plot","text":"x plotscaper scene schema spec list plot specification","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a plot to a scene or schema — add_plot","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a scatterplot to a scene or schema — add_scatterplot","title":"Add a scatterplot to a scene or schema — add_scatterplot","text":"function adds scatterplot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a scatterplot to a scene or schema — add_scatterplot","text":"","code":"add_scatterplot(x, variables = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/add_scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a scatterplot to a scene or schema — add_scatterplot","text":"x plotscaper scene schema object variables vector variable names: two continuous discrete (required), one continuous (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/add_scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a scatterplot to a scene or schema — add_scatterplot","text":"scene schema back, plot added appropriately","code":""},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/reference/assign_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign cases to a group — assign_cases","title":"Assign cases to a group — assign_cases","text":"function assigns specific cases (rows data) permanent group within plotscaper scene schema. Permanent group assignments removed double-clicking.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/assign_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign cases to a group — assign_cases","text":"","code":"assign_cases(x, cases = NULL, group = 1)"},{"path":"https://bartonicek.github.io/plotscaper/reference/assign_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign cases to a group — assign_cases","text":"x plotscaper scene schema cases cases (rows) select group group assign cases (can 1, 2, 3)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/assign_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign cases to a group — assign_cases","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/assigned_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assigned cases — assigned_cases","title":"Get assigned cases — assigned_cases","text":"function returns cases data assigned specific permanent group within plotscaper scene.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/assigned_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assigned cases — assigned_cases","text":"","code":"assigned_cases(x, group = 1)"},{"path":"https://bartonicek.github.io/plotscaper/reference/assigned_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assigned cases — assigned_cases","text":"x plotscaper scene group group retrieve cases (can : 1, 2, 3)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/assigned_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get assigned cases — assigned_cases","text":"numeric vector case ids","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/clear_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set interactive scene layout — clear_layout","title":"Set interactive scene layout — clear_layout","text":"function clears existing layout. See set_layout().","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/clear_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set interactive scene layout — clear_layout","text":"","code":"clear_layout(x)"},{"path":"https://bartonicek.github.io/plotscaper/reference/clear_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set interactive scene layout — clear_layout","text":"x plotscaper scene","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/clear_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set interactive scene layout — clear_layout","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/create_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plotscaper schema — create_schema","title":"Create a plotscaper schema — create_schema","text":"function constructs schema interactive plotscaper figure.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/create_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plotscaper schema — create_schema","text":"","code":"create_schema(data = NULL, options = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/create_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plotscaper schema — create_schema","text":"data dataframe options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/create_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plotscaper schema — create_schema","text":"object class plotscaper_schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/create_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plotscaper schema — create_schema","text":"","code":"create_schema(mtcars) |> add_scatterplot(c(\"wt\", \"mpg\")) |> render()"},{"path":"https://bartonicek.github.io/plotscaper/reference/dispatch_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatches a message to a plotscaper scene or schema — dispatch_message","title":"Dispatches a message to a plotscaper scene or schema — dispatch_message","text":"Dispatches message plotscaper scene schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/dispatch_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatches a message to a plotscaper scene or schema — dispatch_message","text":"","code":"dispatch_message(x, message)"},{"path":"https://bartonicek.github.io/plotscaper/reference/dispatch_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatches a message to a plotscaper scene or schema — dispatch_message","text":"x plotscaper scene schema message list get converted JSON message appropriate time","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/dispatch_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispatches a message to a plotscaper scene or schema — dispatch_message","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_plot_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list of plot ids from a plotscaper scene or schema — get_plot_ids","title":"Return a list of plot ids from a plotscaper scene or schema — get_plot_ids","text":"Return list plot ids plotscaper scene schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_plot_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list of plot ids from a plotscaper scene or schema — get_plot_ids","text":"","code":"get_plot_ids(x)"},{"path":"https://bartonicek.github.io/plotscaper/reference/get_plot_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list of plot ids from a plotscaper scene or schema — get_plot_ids","text":"x plotscaper scene schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_plot_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list of plot ids from a plotscaper scene or schema — get_plot_ids","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a plot scale — get_scale","title":"Get a plot scale — get_scale","text":"function returns specific scale specifc plot plotscaper scene.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a plot scale — get_scale","text":"","code":"get_scale(x, id = NULL, scale = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/get_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a plot scale — get_scale","text":"x plotscaper scene id string id plot. See id scale string id scale (x, y, width, height, area, size)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a plot scale — get_scale","text":"list scale properties","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/get_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a plot scale — get_scale","text":"function primarily meant internal use, however, can use learn plotscaper implements scales. output can look bit overwhelming, however, complicated understand plotscaper scales work. scale two important properties: Domain: space values translated Codomain: space values translated example, typical scatterplot, x scale might range data (e.g. [1, 10]) domain width plotting region codomain (e.g. [0, 800] pixels). scale's job link domain codomain, can push values forward scale, first domain codomain. done translating intermediate range [0, 1]. example, using x scale , might first translate value 5.5 0.5 (midpoint domain) translate 0.5 400 (midpoint codomain). may also able reverse process pull values back scale, first codomain domain. Scale, domain, codomain props defaults properties store relevant values. example, continuous scale, props defaults store min max well transformation function inverse (trans, inv), discrete point scale, store vector labels, order, etc... scale, props defaults store following properties: zero, one, scale, mult. zero one properties modify normalized domain values get placed codomain, vice versa. Suppose x ([1, 10], [0, 800] px) scale zero = 0.1 one = 0.9. data values get pushed following intermediate values: value 1 0.1 since 0.1 + (1 - 1) / (10 - 1) * (0.9 - 0.1) = 0.1 value 2 0.1889 since 0.1 + (2 - 1) / (10 - 1) * (0.9 - 0.1) = 0.1889 value 3 0.2778 since 0.1 + ((3 - 1) / (10 - 1)) * (0.9 - 0.1) = 0.2778 ... value 10 0.9 since 0.1 + ((10 - 1) / (10 - 1)) * (0.9 - 0.1) = 0.9 values get translated space codomain, end 10% margins side, .e. value 1 gets pushed 80 pixels ... value 10 gets pushed 720 pixels scale mult properties multiply normalized domain values. work way, however, different semantically: scale meant constant whereas mult may change dynamically, interaction. example, default, barplot, width scale gets assigned scale value 1 / k, k number categories/bars, mult value 0.9. means bar 1 / k * 0.9 * [plot width pixels] wide, can dynamically make wider narrower pressing +/- keys modify mult property (scale property).","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/id.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot id — id","title":"Plot id — id","text":"string uniquely identifies plot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot id — id","text":"","code":"id"},{"path":"https://bartonicek.github.io/plotscaper/reference/id.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot id — id","text":"object class NULL length 0.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot id — id","text":"id string uniquely identifies plot  within plotscaper scene schema. can match plot based position (e.g. \"plot1\", \"plot2\", ...), order plots added, left--right top--bottom, can match plot based type (e.g. \"scatter1\" \"barplot3\"), , order addition. plot matched based type, morphemes \"plot\" \"gram\" ignored, e.g. \"scatterplot1\" \"scatter1\" \"histogram2d4\" \"histo2d4\". string can also shortened, e.g. \"p1\" \"plot1\", \"s2\" \"scatter2\",  \"hh3\" \"histo2d3\".","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a plot — normalize","title":"Normalize a plot — normalize","text":"function switches representation plot normalized one, e.g. spineplot, spinogram, etc...","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a plot — normalize","text":"","code":"normalize(x, id = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a plot — normalize","text":"x plotscaper scene id string id plot. See id","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a plot — normalize","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for plotscaper — plotscaper-shiny","title":"Shiny bindings for plotscaper — plotscaper-shiny","text":"Output render functions using plotscaper within Shiny applications interactive Rmd documents.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for plotscaper — plotscaper-shiny","text":"","code":"plotscaperOutput(outputId, width = \"100%\", height = \"400px\")  renderPlotscaper(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for plotscaper — plotscaper-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates plotscaper env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper-shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny bindings for plotscaper — plotscaper-shiny","text":"Shiny widget output rendered Shiny widget","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper_global.html","id":null,"dir":"Reference","previous_headings":"","what":"A Plotscaper Global Configuration Object — plotscaper_global","title":"A Plotscaper Global Configuration Object — plotscaper_global","text":"Used mainly setting HTTP server communication interactive R session figure.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Plotscaper Global Configuration Object — plotscaper_global","text":"","code":"plotscaper_global"},{"path":"https://bartonicek.github.io/plotscaper/reference/plotscaper_global.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Plotscaper Global Configuration Object — plotscaper_global","text":"object class environment length 7.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/pop_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the last plot from a scene or schema — pop_plot","title":"Remove the last plot from a scene or schema — pop_plot","text":"function removes last plot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/pop_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the last plot from a scene or schema — pop_plot","text":"","code":"pop_plot(x)"},{"path":"https://bartonicek.github.io/plotscaper/reference/pop_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the last plot from a scene or schema — pop_plot","text":"x plotscaper scene schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/pop_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the last plot from a scene or schema — pop_plot","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a reducer — reducer","title":"Create a reducer — reducer","text":"Constructs reducer can used show alternative summaries plotscaper plot.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a reducer — reducer","text":"","code":"reducer(initialfn = NULL, reducefn = NULL, name = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a reducer — reducer","text":"initialfn JavaScript initializing function reducefn JavaScript reducer function specified name name reducer (string)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a reducer — reducer","text":"reducer (really just list additional formatting)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a reducer — reducer","text":"reducefn initialfn strings interpretable JavaScript functions. : initialfn take 0 arguments just return value (.e. thunk). reducefn take two arguments previous next return result type previous.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reducer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a reducer — reducer","text":"","code":"r <- reducer(initialfn = \"() => 0\",              reducefn = \"(x, y) => Math.max(x, y)\",              name = \"max\") create_schema(mtcars) |>   add_barplot(c(\"cyl\", \"mpg\"), options = list(reducer = r)) #> plotscaper schema: #> add-plot { type: bar, variables: c(\"cyl\", \"mpg\"), reducer: list(initialfn = \"() => 0\", reducefn = \"(x, y) => Math.max(x, y)\", name = \"max\") }"},{"path":"https://bartonicek.github.io/plotscaper/reference/remove_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specific plot from a scene or schema — remove_plot","title":"Remove specific plot from a scene or schema — remove_plot","text":"function removes specific plot plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/remove_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specific plot from a scene or schema — remove_plot","text":"","code":"remove_plot(x, id = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/remove_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specific plot from a scene or schema — remove_plot","text":"x plotscaper scene schema id string id plot. See id","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/remove_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specific plot from a scene or schema — remove_plot","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a schema into an interactive scene — render","title":"Render a schema into an interactive scene — render","text":"function takes plotscaper schema renders concrete htmlwidgets widget.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a schema into an interactive scene — render","text":"","code":"render(   schema,   launch_server = TRUE,   width = NULL,   height = NULL,   elementId = NULL,   options = NULL )"},{"path":"https://bartonicek.github.io/plotscaper/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a schema into an interactive scene — render","text":"schema plotscaper schema object launch_server Whether launch httpuv server interaction figure width Width height Height elementId Id HTML element render scene (optional) options list options","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a schema into an interactive scene — render","text":"object class plotscaper_scene","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset a scene or schema — reset","title":"Reset a scene or schema — reset","text":"function resets plotscaper scene schema. selection/group assignment removed, axis limits/levels zoom restored default.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset a scene or schema — reset","text":"","code":"reset(x)"},{"path":"https://bartonicek.github.io/plotscaper/reference/reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset a scene or schema — reset","text":"x plotscaper scene schema","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset a scene or schema — reset","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/select_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Select cases of the data — select_cases","title":"Select cases of the data — select_cases","text":"function selects specific cases (rows data) within plotscaper scene schema assigning transient selection. Transient group assignment removed clicking.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/select_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select cases of the data — select_cases","text":"","code":"select_cases(x, cases = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/select_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select cases of the data — select_cases","text":"x plotscaper scene schema cases cases (rows) select","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/select_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select cases of the data — select_cases","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/selected_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Get selected cases — selected_cases","title":"Get selected cases — selected_cases","text":"function returns cases data selected within plotscaper scene.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/selected_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get selected cases — selected_cases","text":"","code":"selected_cases(x)"},{"path":"https://bartonicek.github.io/plotscaper/reference/selected_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get selected cases — selected_cases","text":"x plotscaper scene","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/selected_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get selected cases — selected_cases","text":"numeric vector case ids","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set interactive scene layout — set_layout","title":"Set interactive scene layout — set_layout","text":"function sets layout plotscaper scene. Similar graphics::layout function.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set interactive scene layout — set_layout","text":"","code":"set_layout(x, layout = NULL)"},{"path":"https://bartonicek.github.io/plotscaper/reference/set_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set interactive scene layout — set_layout","text":"x plotscaper scene layout numeric matrix plot ids, arranged contiguous rectangles","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set interactive scene layout — set_layout","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set reactive parameters — set_parameters","title":"Set reactive parameters — set_parameters","text":"functions sets reactive paramaters plot histogram.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set reactive parameters — set_parameters","text":"","code":"set_parameters(   x,   id = NULL,   width = NULL,   anchor = NULL,   width_x = NULL,   anchor_x = NULL,   width_y = NULL,   anchor_y = NULL )"},{"path":"https://bartonicek.github.io/plotscaper/reference/set_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set reactive parameters — set_parameters","text":"x plotscaper scene id string id plot. See id width Histogram binwidth anchor Histogram anchor width_x 2D histogram binwidth (x-axis) anchor_x 2D histogram anchor (x-axis) width_y 2D histogram binwidth (y-axis) anchor_y 2D histogram anchor (y-axis)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set reactive parameters — set_parameters","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values of a scale — set_scale","title":"Set values of a scale — set_scale","text":"function sets values scale within one plot inside plotscaper scene schema.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set values of a scale — set_scale","text":"","code":"set_scale(   x,   id = NULL,   scale = NULL,   min = NULL,   max = NULL,   breaks = NULL,   zero = NULL,   one = NULL,   direction = NULL,   mult = NULL,   default = NULL,   unfreeze = NULL )"},{"path":"https://bartonicek.github.io/plotscaper/reference/set_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values of a scale — set_scale","text":"x plotscaper scene schema id string id plot. See id scale string identifying scale. Can : \"x\", \"y\", \"area\", \"size\". min Scale minimum (continuous scales ) max Scale maximum (continuous scales ) breaks vector discrete breaks (discrete scale ) zero proportion codomain smallest/first value gets mapped one proportion codomain largest/last value gets mapped direction Scale direction. Can 1 -1 mult Scale multiplier default Whether set arguments scale defaults unfreeze Whether unfreeze frozen parameters (lower y-axis limit barplot)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/set_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values of a scale — set_scale","text":"scene schema back","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/start_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a server for communication between the R session and plostcaper scenes — start_server","title":"Start a server for communication between the R session and plostcaper scenes — start_server","text":"function starts httpuv server interactive communication R session plotscaper scenes. Uses plotscaper_global options.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/start_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a server for communication between the R session and plostcaper scenes — start_server","text":"","code":"start_server(random_port = FALSE)"},{"path":"https://bartonicek.github.io/plotscaper/reference/start_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a server for communication between the R session and plostcaper scenes — start_server","text":"random_port Whether use random port number. Useful default port already taken.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/start_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a server for communication between the R session and plostcaper scenes — start_server","text":"Nothing (called side effects)","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom into an area of a plot — zoom","title":"Zoom into an area of a plot — zoom","text":"function zooms rectangular area specified plot. coordinates rectangular area can specified either percentages plotting region, absolute coordinates (pixels), data coordinates.","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom into an area of a plot — zoom","text":"","code":"zoom(x, id = NULL, coords = NULL, units = \"pct\")"},{"path":"https://bartonicek.github.io/plotscaper/reference/zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom into an area of a plot — zoom","text":"x plotscaper scene schema id string id plot. See id coords coordinates rectangle zoom , following order: x0, y0, x1, y1 units units interpret coordinates. Can \"pct\" (percentages plotting region), \"abs\" (absolute screen coordinates, pixels), \"data\" (data coordinates; works scales continuous).","code":""},{"path":"https://bartonicek.github.io/plotscaper/reference/zoom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom into an area of a plot — zoom","text":"scene schema back","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://bartonicek.github.io/plotscaper/news/index.html","id":"plotscaper-020","dir":"Changelog","previous_headings":"","what":"plotscaper 0.2.0","title":"plotscaper 0.2.0","text":"Initial CRAN submission.","code":""}]
