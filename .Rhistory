httpuv::stopAllServers()
scene <- create_schema(url) |> render()
scene |>
add_scatterplot(c("rating", "votes")) |>
add_barplot(c("director"))
scene |>
add_scatterplot(c("rating", "votes")) |>
add_barplot(c("director"))
devtools::install()
devtools::document()
devtools::install()
.rs.restartR()
.rs.restartR()
library(plotscaper)
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
render()
scene
scene |> add_bibarplot(c("cyl", "mpg"))
devtools::load_all()
scene |> add_bibarplot(c("cyl", "mpg"))
httpuv::stopAllServers()
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
render()
scene |> add_bibarplot(c("cyl", "mpg"))
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt"))
schema
plots <- list()
for (msg in schema$queue) {
if (msg$type == "add-plot") {
n <- length(plots)
plots[[paste0("plot", n)]] <- msg$id
}
}
plots
schema$queue
for (msg in schema$queue) {
print(msg)
# if (msg$type == "add-plot") {
#   n <- length(plots)
#   plots[[paste0("plot", n)]] <- msg$id
#   }
}
for (msg in schema$queue) {
print(msg$type)
# if (msg$type == "add-plot") {
#   n <- length(plots)
#   plots[[paste0("plot", n)]] <- msg$id
#   }
}
for (msg in schema$queue) {
if (msg$type == "add-plot") {
n <- length(plots)
plots[[paste0("plot", n)]] <- msg$data$id
}
}
plots
?structure
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt"))
schema
schema$plots
?.DollarNames
devtools::document()
devtools::install()
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt"))
schema$plot1
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt"))
schema$data
schema$data
schema$queue
schema
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?.DollarNames
?.AtNames
library(dplyr)
mtcars |> select(wt, mpg)
foo <- new.env()
foo$x <- 10
?.rs.makeCompletions()
?.rs.makeCompletions
devtools::install_github("r-rudra/patch")
library(patch)
help("patch_function")
?.DollarNames
?rc.settings()
.CompletionEnv
?tools
?utils::.DollarNames()
$x
devtools::check()
.DollarNames.plotscaper_schema <- function(x, pattern) {
return(c("foo"))
}
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt"))
?`$`
`[[`.plotscaper_schema <- function(x, y) {
`[[`.plotscaper_schema <- function(x, y) {
`[.plotscaper_schema` <- function(x, i) {
return(99)
}
schema$foo
schema[1]
`[.plotscaper_schema` <- function(x, i) {
if (i %in% names(x)) NextMethod()
else return(99)
}
schema["data"]
schema[foo]
schema["foo"]
schema[["data"]]
.DollarNames.plotscaper_schema <- function(x, pattern) {
c(names(x), "foo")
}
`[[.plotscaper_schema` <- function(x, i) {
if (!is.numeric(i)) NextMethod()
}
get_plot_keys <- function(schema) {
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
print(type)
}
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (!(type %in% counts)) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
}
print(counts)
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (!(type %in% counts)) counts[[type]] = 0
counts[[type]] <<- counts[[type]] + 1
}
print(counts)
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (!(type %in% counts)) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
print(counts)
}
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- new.env()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (!(type %in% counts)) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
print(counts)
}
}
get_plot_keys(schema)
x <- new.env()
x["foo"]
x[["foo"]]
get_plot_keys <- function(schema) {
counts <- new.env()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (is.null(counts[[type]])) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
print(counts)
}
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- new.env()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (is.null(counts[[type]])) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
print(counts[["add-plot"]])
}
}
get_plot_keys(schema)
x <- list(foo)
x <- list(foo = 0)
x$foo <- x$foo + 1
x
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (is.null(counts[[type]])) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
print(counts[["add-plot"]])
}
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
if (is.null(counts[[type]])) counts[[type]] = 0
counts[[type]] <- counts[[type]] + 1
}
print(counts[["add-plot"]])
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
plot_type <- msg$data$type
if (is.null(counts[[plot_type]])) counts[[plot_type]] = 0
counts[[plot_type]] <- counts[[plot_type]] + 1
}
}
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
plot_type <- msg$data$type
if (is.null(counts[[plot_type]])) counts[[plot_type]] = 0
counts[[plot_type]] <- counts[[plot_type]] + 1
}
print(counts)
}
get_plot_keys(schema)
get_plot_keys <- function(schema) {
counts <- list()
plots <- c()
for (msg in schema$queue) {
type <- msg$type
if (!(type == "add-plot")) next
plot_type <- msg$data$type
if (is.null(counts[[plot_type]])) counts[[plot_type]] = 0
counts[[plot_type]] <- counts[[plot_type]] + 1
plots <- c(plots, paste0(plot_type, counts[[plot_type]]))
}
plots
}
get_plot_keys(schema)
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
get_plot_keys(schema)
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
.DollarNames.plotscaper_schema <- function(x, pattern) {
c(names(x), get_plot_keys(x))
}
schema$data
schema$scatter1
schema$scatter1
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
mtcars
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
create_schema(mtcars)
create_schema(mtcars) |>
add_scatterplot(c("wt"))
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
.rs.restartR()
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
library(plotscaper)
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
scene <- schema |> render()
scene
scene |> select_cases(1:10)
scene <- schema |> render()
scene |> select_cases(1:10)
scene |> select_cases(1:10) |> assign_cases(10:20)
scene |> assign_cases(10:20) |> select_cases(1:10)
scene |> assign_cases(10:20) |> select_cases(1:10)
devtools::load_all()
scene |>
add_scatterplot(c("rating", "votes")) |>
add_barplot(c("director"))
scene <- create_schema(url) |> render()
httpuv::stopAllServers()
scene <- create_schema(url) |> render()
scene
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
scene <- schema |> render()
scene |> assign_cases(10:20) |> select_cases(1:10)
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
schema |> render()
devtools::load_all()
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
schema |> render()
httpuv::stopAllServers()
schema |> render()
devtools::install()
library(plotscaper)
schema <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
add_histogram(c("wt")) |>
add_histogram("mpg")
schema |> render()
pkgdown::build_site()
foo <- function(x = c(1, 2, 3)) {
}
foo
args(foo)
?args()
args(ls)
str(foo)
args(foo)$x
args(foo)
body(args(foo))
formals(foo)
formals(foo)$x
y <- formals(foo)$x
y
y + 1
eval(y)
euclid_norm <- function(x, y) sqrt(sum(x^2 + y^2))
euclid_norm(c(1, 2), 3)
euclid_norm(c(1, 2, 3))
euclid_norm <- function(x, y = c()) sqrt(sum(x^2 + y^2))
euclid_norm(c(1, 2), 3)
euclid_norm(c(1, 2, 3))
euclid_norm <- function(x, y = 0) sqrt(sum(x^2 + y^2))
euclid_norm(c(1, 2), 3)
euclid_norm(c(1, 2, 3))
(1:3)^2
sum((1:3)^2)
sqrt(sum((1:3)^2))
euclid_norm <- function(x, y = 0) sqrt(sum(x^2) + sum(y^2))
euclid_norm(c(1, 2), 3)
euclid_norm(c(1, 2, 3))
library(plotscaper)
library(caret)
data("Sacramento")
dplyr::glimpse(Sacramento)
create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft")) |>
render()
httpuv::stopAllServers()
library(plotscaper)
library(caret)
data("Sacramento")
dplyr::glimpse(Sacramento)
create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft")) |>
render()
devtools::install()
library(plotscaper)
library(caret)
create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft")) |>
render()
scene <- schema |> render()
schema <- create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft"))
scene <- schema |> render()
scene
library(plotscaper)
library(caret)
data("Sacramento")
dplyr::glimpse(Sacramento)
.rs.restartR()
library(plotscaper)
library(caret)
data("Sacramento")
dplyr::glimpse(Sacramento)
create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft")) |>
render()
schema <- create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft"))
scena <- schema |>  render()
scene <- schema |>  render()
scene
scene |> add_scatterplot(c("sqft", "price"))
scene |> add_scatterplot(c("sqft", "price"))
scene |> pop_plot()
scene |> pop_plot()
scene |> select_cases(1:100)
schema <- create_schema(Sacramento) |>
add_scatterplot(c("longitude", "latitude"), list(ratio = 1)) |>
add_barplot(c("city")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram(c("sqft")) |>
select_cases(1:100)
scene <- schema |>  render()
scene
scene |> select_cases(100:200)
scene
scene
scene |> set_scale("scatter1", min = -122)
scene |> set_scale("scatter1", min = -122)
scene |> set_scale("scatter1", "x", min = -122)
scene |> zoom("scatter1", c(0.25, 0.25, 0.75, 0.75))
diamonds <- ggplot2::diamonds
dplyr::glimpse(diamonds)
create_schema(diamonds) |>
add_scatterplot(c("carat", "price")) |>
add_barplot(c("color")) |>
render()
