x <- scene |> get_scale("plot1", "x")
stopifnot(
x$domain$props$min == 0 &&
x$domain$props$max == 10 &&
x$props$zero == 0 &&
x$props$one == 1
)
devtools::install()
y <- scene |> get_scale("plot1", "y")
y <- scene |> get_scale("plot1", "y")
.rs.restartR()
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
render()
scene |> set_scale("plot1", "x", min = 0, max = 10)
scene |> set_scale("plot1", "y", direction = -1)
x <- scene |> get_scale("plot1", "x")
y <- scene |> get_scale("plot1", "y")
stopifnot(
x$domain$props$min == 0 &&
x$domain$props$max == 10 &&
x$props$zero == 0 &&
x$props$one == 1
)
y$props
stopifnot(
y$domain$props
)
stopifnot(
y$props$direction != -1
)
y$props$direction
stopifnot(
y$props$direction == -1
)
size <- scene |> get_scale("plot1", "size")
size
scene |> set_scale("plot1", "size", mult = 3)
stopifnot(
size$props$mult == 3
)
size <- scene |> get_scale("plot1", "size")
stopifnot(
size$props$mult == 3
)
scene |> set_scale("plot1", "size", mult = 3, scale = 1/20)
scene |> set_scale("plot1", "size", mult = 3, scale = 1/20)
x <- scene |> get_scale("plot1", "x")
y <- scene |> get_scale("plot1", "y")
size <- scene |> get_scale("plot1", "size")
size
scene |> set_scale("plot1", "size", mult = 3)
x <- scene |> get_scale("plot1", "x")
y <- scene |> get_scale("plot1", "y")
size <- scene |> get_scale("plot1", "size")
stopifnot(
x$domain$props$min == 0 &&
x$domain$props$max == 10 &&
x$props$zero == 0 &&
x$props$one == 1
)
stopifnot(
y$props$direction == -1
)
stopifnot(
size$props$mult == 3
)
library(plotscaper)
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
render()
scene |> set_scale("plot1", "x", min = 0, max = 10)
scene |> set_scale("plot1", "y", direction = -1)
scene |> set_scale("plot1", "size", mult = 3)
x <- scene |> get_scale("plot1", "x")
y <- scene |> get_scale("plot1", "y")
size <- scene |> get_scale("plot1", "size")
stopifnot(
x$domain$props$min == 0 &&
x$domain$props$max == 10 &&
x$props$zero == 0 &&
x$props$one == 1
)
stopifnot(
y$props$direction == -1
)
stopifnot(
size$props$mult == 3
)
getwd()
source("./inst/tests/set_scale.test.R")
source("./inst/tests/set_scale.test.R")
source("./inst/tests/set_scale.test.R")
source("./inst/tests/set_scale.test.R")
scene |> get_scale("plot1", "size")
scene |> get_scale("plot1", "size")
scene |> get_scale("plot1", "size")
devtools::load_all(".")
devtools::check()
library(plotscaper)
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg"))
create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
render()
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
render()
scene |> get_scale("plot1", "x")
scene <- create_schema(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
render()
scene
scene |> get_scale("plot1", "x")
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
pkgdown::build_site()
devtools::install()
devtools::check()
devtools::load_all()
lhs(y ~ x1 + x2)
lhs <- function(x) UseMethod("lhs")
rhs <- function(x) UseMethod("rhs")
lhs.formula <- function(x) {
if (length(x) == 3) return(x[[2]])
return(NULL)
}
rhs.formula <- function(x) {
if (length(x) == 3) {
if (x[[3]] == ".") NULL else x[[3]]
}
else x[[2]]
}
lhs(y ~ x1 + x2)
rhs(y ~ x1 + x2)
devtools::load_all()
lhs(y ~ x)
devtools::document()
lhs(y ~ x)
lhs(y ~ x)
lhs <- function(x) UseMethod("lhs")
rhs <- function(x) UseMethod("rhs")
lhs.formula <- function(x) {
if (length(x) == 3) return(x[[2]])
return(NULL)
}
rhs.formula <- function(x) {
if (length(x) == 3) {
if (x[[3]] == ".") NULL else x[[3]]
}
else x[[2]]
}
lhs(y ~ x)
devtools::document()
devtools::document()
devtools::load_all()
lhs(z ~ x)
rhs(y ~ x1 + x2)
terms(lhs(y ~ x))
variable.names(lhs(y ~ x))
lhs(z ~ x)
x <- lhs(z ~ x)
x
class(x)
?name
x <- lhs(x + y + z ~ cat1 + cat2)
x
class(x)
?call
deparse(x)
x
x <- lhs(x ~ cat1 + cat2)
class(x)
x <- lhs(x + y ~ cat1 + cat2)
class(x)
?labels()
labels(x)
labels(terms(x))
x
all.vars(x)
x <- lhs(sum(x) + y ~ cat1 + cat2)
all.vars(x)
?all.vars
all.names(expression(sin(x+y)))
all.names(quote(sin(x+y))) # or a call
all.vars(expression(sin(x+y)))
all.names(expression(sin(x+y)))
all.names(x)
?all.names
x <- lhs(sum(x) + count() + y ~ cat1 + cat2)
all.names(x)
all.names(lhs(x))
all.names(enquote(lhs(x))))
all.names(x)
x
terms(x)
x
as.character(x)
as.character(deparse(x))
deparse(x)
strsplit(deparse(x), "+")
strsplit(deparse(x), " + ")
strsplit(deparse(x), "\\+")
trimws(strsplit(deparse(x), "\\+"))
trimws(strsplit(deparse(x), "\\+")[[1]])
get_terms <- function(x) {
x |> strsplit() |> `]]`(1)
}
get_terms(x)
get_terms <- function(x) {
x |> strsplit() |> `[[`(1)
}
get_terms(x)
get_terms <- function(x) {
x |> strsplit()
}
get_terms(x)
get_terms <- function(x) {
x |> deparse() |> strsplit()
}
get_terms(x)
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+")
}
get_terms(x)
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> `[[`(1)
}
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> .[[1]]
}
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> .[[1]]
}
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> (\(x) x[[1]])
}
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+")
}
nth <- function(x, n) x[[n]]
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> nth(1)
}
get_terms(x)
get_terms <- function(x) {
x |> deparse() |> strsplit("\\+") |> nth(1) |> trimws()
}
get_terms(x)
devtools::document()
devtools::document()
devtools::load_all()
names(airquality) <- c("ozone", "solar radiation", "wind",
"temperature", "month", "day")
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
render()
devtools::check()
usethis::use_version("patch")
usethis::use_version("patch")
devtools::check()
devtools::submit_cran()
#| fig-width: 7
#| fig-height: 5
library(plotscaper)
names(airquality) <- c("ozone", "solar radiation", "wind",
"temperature", "month", "day")
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
render()
#| fig-width: 7
#| fig-height: 5
library(plotscaper)
names(airquality) <- c("ozone", "solar radiation", "wind",
"temperature", "month", "day")
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
render()
devtools::load_all()
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
render()
httpuv::stopAllServers()
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
render()
create_schema(airquality) |>
add_scatterplot(c("solar radiation", "ozone")) |>
add_barplot(c("day", "ozone"), list(reducer = "max")) |>
add_histogram(c("wind")) |>
add_pcoords(names(airquality)[1:4]) |>
set_scale("plot1", "x", transformation = "log10") |>
render()
create_schema(url) |>
add_scatterplot(c("carat", "price")) |>
add_barplot(c("color")) |>
set_scale("plot1", "size", mult = 0.1, transformation = "log10") |>
render()
url <- "https://raw.githubusercontent.com/bartonicek/plotscape/master/datasets/diamonds.json"
create_schema(url) |>
add_scatterplot(c("carat", "price")) |>
add_barplot(c("color")) |>
set_scale("plot1", "size", mult = 0.1, transformation = "log10") |>
render()
create_schema(url) |>
add_scatterplot(c("carat", "price")) |>
add_barplot(c("color")) |>
set_scale("plot1", "size", mult = 0.1) |>
set_scale("plot1", "x", transformation = "log10") |>
set_scale("plot1", "y", transformation = "log10") |>
render()
pkgdown::build_site()
usethis::use_news_md()
usethis::use_release_issue()
usethis::gh_token_help()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
usethis::use_release_issue()
usethis::use_github_links()
urlchecker::url_check()
usethis::use_github_links()
devtools::check(remote = TRUE, manual = TRUE)
revdepcheck::revdep_check(num_workers = 4)
pak::pkg_install("r-lib/revdepcheck")
install.packages("pak")
pak::pkg_install("r-lib/revdepcheck")
usethis::use_version("patch")
usethis::use_version("patch")
devtools::check()
install.packages("plotscaper")
devtools::build_readme()
devtools::submit_cran()
devtools::submit_cran()
devtools::load_all()
devtools::load_all()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "wt")) |>
render()
httpuv::stopAllServers()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "wt")) |>
render()
plotscaper::start_server(TRUE)
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "wt")) |>
render()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am")) |>
render()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "mpg")) |>
render()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "am")) |>
render()
mtcars |>
create_schema() |>
add_fluctplot(c("cyl", "am", "cyl")) |>
render()
devtools::check()
usethis::use_version("patch")
usethis::use_version("patch")
devtools::submit_cran()
eval(quote(x <- 1))
x
x <- list(data = data.frame(x = 1:3, y = 4:6))
x
f <- function(x, vars) {
eval(quote(vars), x)
}
f(x, c(x))
x <- list(data = data.frame(a = 1:3, b = 4:6))
f <- function(x, vars) {
eval(quote(vars), x)
}
f(x, c(a))
f(x, a)
eval(quote(vars), x)
f <- function(x, vars) {
eval(quote(vars), x)
}
f(x, a)
f <- function(x, y) {
eval(quote(y), x)
}
f(x, a)
eval(quote(a), x)
?eval
eval("a", x)
eval(quote(a), x)
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
eval(quote(a), sample_df)
f <- function(x, y) {
eval(quote(data), x)
}
f(x, a)
f <- function(x, y) {
eval(quote(vars), eval(quote(data), x))
}
f(x, a)
f <- function(x, vars) {
eval(quote(vars), eval(quote(data), x))
}
f(x, a)
f(x, c(a))
f <- function(x, vars) {
eval(quote(data), x)
}
f(x, c(a))
f <- function(x, vars) {
eval(quote(vars), eval(quote(data), x))
}
f(x, a)
f(x, quote(a))
f(x, a)
f <- function(x, vars) {
vars <- substitute(vars)
eval(vars, eval(quote(data), x))
}
f(x, a)
f(x, c(a, b))
f(x, c(a))
f(x, c(a, b))
f <- function(x, vars) {
vars <- substitute(vars)
eval(quote(data), x)
}
f(x, c(a, b))
f <- function(x, vars) {
vars <- substitute(vars)
eval(quote(data), x)[, vars]
}
f(x, c(a, b))
f <- function(x, vars) {
vars <- substitute(vars)
eval(quote(data), x)[, c("a")]
}
f(x, c(a, b))
eval(quote(data), x)[, c("a", "b")]
f <- function(x, vars) {
vars <- substitute(vars)
eval(quote(data), x)[, deparse(vars)]
}
f(x, c(a, b))
f <- function(x, vars) {
vars <- substitute(vars)
deparse(vars)
# eval(quote(data), x)[, deparse(vars)]
}
f(x, c(a, b))
f <- function(x, vars) {
# vars <- substitute(vars)
deparse(vars)
# eval(quote(data), x)[, deparse(vars)]
}
f(x, c(a, b))
f(x, a)
f <- function(x, vars) {
# vars <- substitute(vars)
deparse(vars)
# eval(quote(data), x)[, deparse(vars)]
}
f(x, a)
f <- function(x, vars) {
# vars <- substitute(vars)
deparse(substitute(vars))
# eval(quote(data), x)[, deparse(vars)]
}
f(x, a)
f(x, c("a", "b"))
f(x, c(a, b))
select <- function(df, vars) {
vars <- substitute(vars)
var_pos <- setNames(as.list(seq_along(df)), names(df))
pos <- eval(vars, var_pos)
df[, pos, drop = FALSE]
}
select(x$data, a)
select(x$data, c(a, b))
x <- list(data = data.frame(a = 1:3, b = 4:6, c = letters[1:3]))
select(x$data, c(a, b))
select(x$data, c(a, b, c))
select(x$data, -c(a, b))
