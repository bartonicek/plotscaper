initialfn = JS("() => -Infinity"),
reducefn = JS("(a, b) => Math.max(a, b)"),
name = "max"
)
reducer1 <- reducer(
initialfn = JS("() => -Infinity"),
reducefn = JS("(a, b) => Math.max(a, b)"),
name = "max"
)
set_scene(sacramento) |>
add_scatterplot(c("latitude", "longitude")) |>
add_barplot(c("city", "price"),
options = list(reducer = reducer1))
set_scene(sacramento) |>
add_scatterplot(c("latitude", "longitude")) |>
add_barplot(c("city", "price"))
set_scene(sacramento) |>
add_scatterplot(c("latitude", "longitude")) |>
add_barplot(c("city", "price"),
options = list(reducer = reducer1))
set_scene(sacramento) |>
add_scatterplot(c("longitude", "latitude")) |>
add_barplot("city") |>
add_histogram(c("sqft")) |>
add_fluctplot(c("beds", "baths")) |>
add_histogram2d(c("sqft", "price")) |>
add_notes() |>
add_parcoords(c("price", "latitude", "longitude")) |>
set_layout(layout)
4^4
expand.grid(1:4, 1:4, 1:4, 1:4)
X <- expand.grid(1:4, 1:4, 1:4, 1:4)
diff(X)
apply(X, 1, diff)
Y <- apply(X, 1, diff)
Y
apply(Y, 2, function(x) any(x < 0))
sum(apply(Y, 2, function(x) !any(x < 0)))
X <- expand.grid(1:3, 1:3, 1:3)
Y <- apply(X, 1, diff)
sum(apply(Y, 2, function(x) !any(x < 0)))
which(apply(Y, 2, function(x) !any(x < 0)))
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:3, 1:3)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
Y
X
X[which(apply(as.matrix(Y), 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:3, 1:3)
Y <- apply(X, 1, diff)
X[which(apply(as.matrix(Y, nrow = nrow(X)),
2, function(x) !any(x < 0))), ]
Y
X[which(apply(as.matrix(Y, ncol = nrow(X)),
2, function(x) !any(x < 0))), ]
X <- expand.grid(1:3, 1:3, 1:3)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
3^3
X
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:2, 1:2, 1:2)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:4, 1:4, 1:4)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:2, 1:2, 1:2, 1:2)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:4, 1:4)
Y <- apply(X, 1, diff)
X[which(apply(Y, 2, function(x) !any(x < 0))), ]
X <- expand.grid(1:4, 1:4)
Y <- apply(X, 1, diff)
X
apply(X, 1, diff)
apply(X, 1, diff, drop = FALSE)
apply(X, 1, diff)
?apply
apply(X, 1, diff, simplify = FALSE)
X[which(apply(Y, 2, function(x) !any(x < 0)), simplify = FALSE), ]
X[which(apply(Y, 2, function(x) !any(x < 0), simplify = FALSE)), ]
apply(X, 1, diff, simplify = FALSE)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
check_increasing(c(1, 2, 3))
check_increasing(c(1, 2, 1))
X <- expand.grid(1:4, 1:4)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
X[apply(X, 1, check_increasing)]
X[apply(X, 1, check_increasing), ]
X <- expand.grid(1:3, 1:3)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
X[apply(X, 1, check_increasing), ]
nrow(X[apply(X, 1, check_increasing), ])
X <- expand.grid(1:4, 1:4)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
X <- expand.grid(1:5, 1:5)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
X <- expand.grid(1:6, 1:6)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
X[apply(X, 1, check_increasing), ]
X <- expand.grid(1:2, 1:2, 1:3)
X <- expand.grid(1:2, 1:2, 1:2)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
X[apply(X, 1, check_increasing), ]
nrow(X[apply(X, 1, check_increasing), ])
X <- expand.grid(1:3, 1:3, 1:3)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
X <- expand.grid(1:4, 1:4, 1:4)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
X[apply(X, 1, check_increasing), ]
X <- expand.grid(1:5, 1:5, 1:5)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
X[apply(X, 1, check_increasing), ]
nrow(X[apply(X, 1, check_increasing), ])
m <- 6
n <- 6
X <- expand.grid(1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 3
X <- expand.grid(1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 4
X <- expand.grid(1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 2
X <- expand.grid(1:n, 1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 3
X <- expand.grid(1:n, 1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 4
X <- expand.grid(1:n, 1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 5
X <- expand.grid(1:n, 1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
n <- 6
X <- expand.grid(1:n, 1:n, 1:n, 1:n)
check_increasing <- function(x) {
!any(diff(x) < 0)
}
nrow(X[apply(X, 1, check_increasing), ])
devtools::load_all()
set_scene(mtcars)
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
library(plotscaper)
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg"))
x <- list(fooBar = 10, ayyLmao = 20)
for (foo in x) print(foo)
for (foo in names(x)) print(foo)
strsplit("point_queries", "_")
unlist(strsplit("point_queries", "_"))
gsub("_(\\w)", "\\U\\1", "foo_bar")
gsub("_(\\w?)", "\\U\\1", "foo_bar")
gsub("_(\\w?)", "\\U\\1", "foo_bar", perl = TRUE)
snake_to_camel <- function(x) {
gsub("_(\\w?)", "\\U\\1", x, perl = TRUE)
}
snake_to_camel("hello_world_bye_world")
snake_to_camel <- function(x) {
gsub("_(\\w?)", "\\U\\1", x, perl = TRUE)
}
set_scene(mtcars, options = list(foo_bar = 10, baz_bal = 20)) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
set_scene(mtcars, options = list(foo_bar = 10, baz_bal = 20)) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
set_scene(mtcars, options = list(foo_bar = 10, baz_bal = 20)) |>
add_scatterplot(c("wt", "mpg"))
set_scene(mtcars, options = list(point_queries = c("cyl"))) |>
add_scatterplot(c("wt", "mpg"))
set_scene(mtcars, options = list(point_queries = c("cyl", "am"))) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
set_scene(mtcars, options = list(point_queries = c("cyl", "am"))) |>
add_scatterplot(c("wt", "mpg"))
devtools::load_all()
devtools::load_all()
set_scene(mtcars) |>
add_barplot(c("cyl"))
set_scene(mtcars) |>
add_barplot(c("cyl")) |>
add_barplot(c("mpg"))
devtools::install()
library(plotscaper)
set_scene(mtcars) |>
add_barplot(c("mpg"))
set_scene(mtcars) |>
add_barplot(c("mpg"))
library(plotscaper)
set_scene(mtcars) |>
add_barplot(c("mpg"))
.rs.restartR()
devtools::install(
)
library(plotscaper)
set_scene(mtcars) |>
add_barplot(c("mpg"))
devtools::load_all()
set_scene(mtcars) |>
add_barplot(c("mpg"))
set_scene(mtcars) |>
add_barplot(c("mpg"))
devtools::load_all()
set_scene(mtcars) |>
add_barplot(c("mpg"))
set_scene(mtcars) |>
add_barplot(c("cyl"))
add_barplot(c("cyl"))
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl"))
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (x, el, data) {
console.log(el)
}")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (x, el, data) {
console.log(x)
}")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x)
}")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x.scene)
}")
?htmlwidgets::onRender()
viewer <- getOption("viewer")
?viewer()
viewer("http://localhost:5173/")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x.scene)
}")
?htmltools::html_print()
htmltools::html_print("<h1>Hello world</h1>")
library(htmltools)
htmlTemplate("<h1>Hello world</h1>")
as.tags("<h1>hello world</h1>")
htmltools::html_print(as.tags("<h1>hello world</h1>"))
?as.tags
as.tags(1, standalone = TRUE)
as.tags(1, standalone = TRUE)
as.tags("foo bar", standalone = TRUE)
as.tags("<div>foo bar</div>", standalone = TRUE)
?viewer
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x.scene)
}")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x.scene)
}")
set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function (el, x, data) {
console.log(x.scene)
}")
utils::browseURL("http://localhost:5173/")
viewer("http://localhost:5173/")
scene <- set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl"))
scene
scene$elementId
viewer("http://localhost:28592/")
viewer("http://localhost:28592")
scene
?html_print()
x <- html_print("foo bar")
x
scene$x
x <- html_print(scene$x)
scene <- set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl"))
scene <- set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl"))
scene
scene <- set_scene(mtcars) |>
add_scatterplot(c("wt", "mpg")) |>
add_barplot(c("cyl")) |>
htmlwidgets::onRender("function() {
console.log(window.location.href)
}")
scene
print.htmlwidget <- function(x, ..., view = interactive()) {
# if we have a viewer then forward viewer pane height (if any)
viewer <- getOption("viewer")
if (!is.null(viewer)) {
viewerFunc <- function(url) {
# get the requested pane height (it defaults to NULL)
paneHeight <- x$sizingPolicy$viewer$paneHeight
# convert maximize to -1 for compatibility with older versions of rstudio
# (newer versions convert 'maximize' to -1 interally, older versions
# will simply ignore the height if it's less than zero)
if (identical(paneHeight, "maximize"))
paneHeight <- -1
# call the viewer
viewer(url, height = paneHeight)
}
} else {
viewerFunc <- utils::browseURL
}
# call html_print with the viewer
url <- html_print(htmltools::as.tags(x, standalone=TRUE), viewer = if (view) viewerFunc)
# return value
invisible(x)
url
}
scene
print(scene)
print(scene)
?htmlwidgets::saveWidget()
htmlwidgets::saveWidget(scene, "foobar.html")
viewer("foobar.html")
?structure()
library(servr)
install.packages("servr")
library(servr)
library(servr)
s <- create_server()
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = paste("Success:", req$PATH_INFO))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = viewer("foobar.html"))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = paste(req))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = req)
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = paste(req$PATH_INFO))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = paste(req$BODY))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = req$PATH_INFO)
})
s <- servr::create_server(handler = function(req) {
print(req)
list(status = 200L, body = req$PATH_INFO)
})
s <- servr::create_server(handler = function(req) {
print(req$BODY)
list(status = 200L, body = req$PATH_INFO)
})
httd(port = 3000)
x <- 0
s <- servr::create_server(handler = function(req) {
x <<- x + 1
list(status = 200L, body = req$PATH_INFO)
})
x <- 0
s <- servr::create_server(handler = function(req) {
x <<- x + 1
print(x)
list(status = 200L, body = req$PATH_INFO)
})
s <- servr::create_server(handler = function(req) {
print(req)
list(status = 200L, body = req$PATH_INFO)
})
s <- servr::create_server(handler = function(req) {
print(ls(req))
list(status = 200L, body = req$PATH_INFO)
})
s <- servr::create_server(handler = function(req) {
# print(ls(req))
print(req$QUERY_STRING)
list(status = 200L, body = req$PATH_INFO)
})
sys.call("ls")
Sys.call("ls")
?sys.call()
system("echo")
system("ls")
library(htmltools)
tagQuery(div(a()))
x <- tagQuery(div(a()))
x$addAttrs("foo")
library(httpuv)
s <- startServer(host = "0.0.0.0", port = 8080,
app = list(
call = function(req) {
body <- paste0("Time: ", Sys.time(), "<br>Path requested: ", req$PATH_INFO)
list(
status = 200L,
headers = list('Content-Type' = 'text/html'),
body = body
)
}
)
)
s$stop()
library(servr)
s = servr::create_server(handler = function(req) {
list(status = 200L, body = paste("Success:", req$PATH_INFO))
})
s$url
browseURL(paste0(s$url, "/hello"))
browseURL(paste0(s$url, "/world"))
s$stop_server()
s <- servr::create_server(handler = function(req) {
print(list.files(req))
list(status = 200L, body = paste(req$PATH_INFO))
})
s <- servr::create_server(handler = function(req) {
list(status = 200L, body = paste(req$PATH_INFO))
})
s <- servr::create_server(handler = function(req) {
print(req)
list(status = 200L, body = paste(req$PATH_INFO))
})
list.files()
s <- servr::create_server(handler = function(req) {
print(ls(e1))
list(status = 200L, body = paste(req$PATH_INFO))
})
browseURL(paste0(s$url, "/hello"))
s <- servr::create_server(handler = function(req) {
print(ls(req))
list(status = 200L, body = paste(req$PATH_INFO))
})
install.packages("plumber")
